// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Repository.Models;

#nullable disable

namespace WebAPI.Repository.Migrations
{
    [DbContext(typeof(AllActorsFemaleInJapanContext))]
    [Migration("20231222085635_AddIdentityAuthentication")]
    partial class AddIdentityAuthentication
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TblCourseWishlist", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.HasKey("CourseId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("tblCourseWishlist", (string)null);
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccountEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("account_email");

                    b.Property<string>("AccountImg")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("account_img");

                    b.Property<bool?>("AccountIsActive")
                        .HasColumnType("bit")
                        .HasColumnName("account_is_active");

                    b.Property<string>("AccountName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountPassword")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("account_password");

                    b.Property<string>("AccountPhone")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("account_phone");

                    b.Property<string>("Biography")
                        .HasMaxLength(700)
                        .HasColumnType("nchar(700)")
                        .HasColumnName("biography")
                        .IsFixedLength();

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RoleId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialId")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)")
                        .HasColumnName("social_id");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("tblAccount", (string)null);
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblBill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bill_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"));

                    b.Property<int?>("AccountId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("BillDate")
                        .HasColumnType("datetime")
                        .HasColumnName("bill_date");

                    b.Property<int?>("BillDiscount")
                        .HasColumnType("int")
                        .HasColumnName("bill_discount");

                    b.Property<bool?>("BillIsActive")
                        .HasColumnType("bit")
                        .HasColumnName("bill_is_active");

                    b.Property<int?>("BillStatus")
                        .HasColumnType("int")
                        .HasColumnName("bill_status");

                    b.Property<decimal?>("BillValue")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("bill_value");

                    b.Property<int?>("CourseId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("order_code");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("payment_method");

                    b.HasKey("BillId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CourseId");

                    b.ToTable("tblBill", (string)null);
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblBillMembership", b =>
                {
                    b.Property<int>("BillMemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bill_mem_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillMemId"));

                    b.Property<int?>("AccountId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("BillDate")
                        .HasColumnType("datetime")
                        .HasColumnName("bill_date");

                    b.Property<int?>("BillDiscount")
                        .HasColumnType("int")
                        .HasColumnName("bill_discount");

                    b.Property<bool?>("BillIsActive")
                        .HasColumnType("bit")
                        .HasColumnName("bill_is_active");

                    b.Property<int?>("BillStatus")
                        .HasColumnType("int")
                        .HasColumnName("bill_status");

                    b.Property<decimal?>("BillValue")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("bill_value");

                    b.Property<int?>("MembershipId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("membership_id");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("order_code");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("payment_method");

                    b.HasKey("BillMemId");

                    b.HasIndex("AccountId");

                    b.HasIndex("MembershipId");

                    b.ToTable("tblBillMembership", (string)null);
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblBlog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blog_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<int?>("AccountId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("BlogDate")
                        .HasColumnType("datetime")
                        .HasColumnName("blog_date");

                    b.Property<string>("BlogDetail")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)")
                        .HasColumnName("blog_detail");

                    b.Property<string>("BlogImg")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("blog_img");

                    b.Property<string>("BlogTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("blog_title");

                    b.HasKey("BlogId");

                    b.HasIndex("AccountId");

                    b.ToTable("tblBlog", (string)null);
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<bool?>("CategoryIsActive")
                        .HasColumnType("bit")
                        .HasColumnName("category_is_active");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("category_name");

                    b.HasKey("CategoryId");

                    b.ToTable("tblCategory", (string)null);
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblClassSchedule", b =>
                {
                    b.Property<int>("ClassScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("class_schedule_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassScheduleId"));

                    b.Property<DateTime?>("ClassDate")
                        .HasColumnType("date")
                        .HasColumnName("class_date");

                    b.Property<int?>("ClassStatus")
                        .HasColumnType("int")
                        .HasColumnName("class_status");

                    b.Property<int?>("RegistrationId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("registration_id");

                    b.Property<TimeSpan?>("SlotEndTime")
                        .HasColumnType("time")
                        .HasColumnName("slot_end_time");

                    b.Property<TimeSpan?>("SlotStartTime")
                        .HasColumnType("time")
                        .HasColumnName("slot_start_time");

                    b.HasKey("ClassScheduleId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("tblClassSchedule", (string)null);
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblComment", b =>
                {
                    b.Property<int?>("AccountId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<int?>("BlogId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("blog_id");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("comment_content");

                    b.Property<DateTime?>("CommentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("comment_date");

                    b.HasIndex("AccountId");

                    b.HasIndex("BlogId");

                    b.ToTable("tblComment", (string)null);
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int?>("AccountId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("CourseDetail")
                        .HasColumnType("text")
                        .HasColumnName("course_detail");

                    b.Property<int?>("CourseDuration")
                        .HasColumnType("int")
                        .HasColumnName("course_duration");

                    b.Property<string>("CourseImg")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("course_img");

                    b.Property<bool?>("CourseIsActive")
                        .HasColumnType("bit")
                        .HasColumnName("course_is_active");

                    b.Property<decimal?>("CoursePrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("course_price");

                    b.Property<string>("CourseTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("course_title");

                    b.HasKey("CourseId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.ToTable("tblCourse", (string)null);
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblCourseSchedule", b =>
                {
                    b.Property<int>("CourseScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_schedule_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseScheduleId"));

                    b.Property<int?>("CourseId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("DayOfWeek")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("day_of_week");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.HasKey("CourseScheduleId");

                    b.HasIndex("CourseId");

                    b.ToTable("tblCourseSchedule", (string)null);
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblMembership", b =>
                {
                    b.Property<int>("MembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("membership_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipId"));

                    b.Property<string>("MembershipDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("membership_description");

                    b.Property<int?>("MembershipDiscours")
                        .HasColumnType("int")
                        .HasColumnName("membership_discours");

                    b.Property<int?>("MembershipDuration")
                        .HasColumnType("int")
                        .HasColumnName("membership_duration");

                    b.Property<bool?>("MembershipIsActive")
                        .HasColumnType("bit")
                        .HasColumnName("membership_is_active");

                    b.Property<string>("MembershipName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("membership_name");

                    b.Property<decimal?>("MembershipPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("membership_price");

                    b.HasKey("MembershipId");

                    b.ToTable("tblMembership", (string)null);
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblRatingCourse", b =>
                {
                    b.Property<int>("RegistrationId")
                        .HasColumnType("int")
                        .HasColumnName("registration_id");

                    b.Property<int?>("CourseId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("Feedback")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("feedback");

                    b.Property<int?>("RatingStar")
                        .HasColumnType("int")
                        .HasColumnName("rating_star");

                    b.HasKey("RegistrationId");

                    b.HasIndex("CourseId");

                    b.ToTable("tblRatingCourse", (string)null);
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblRegistrationCourse", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("registration_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationId"));

                    b.Property<int?>("AccountId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<int?>("CourseId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int?>("CourseScheduleId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("course_schedule_id");

                    b.Property<int?>("CourseStatus")
                        .HasColumnType("int")
                        .HasColumnName("course_status");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("registration_date");

                    b.Property<bool?>("RegistrationStatus")
                        .HasColumnType("bit")
                        .HasColumnName("registration_status");

                    b.HasKey("RegistrationId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseScheduleId");

                    b.ToTable("tblRegistrationCourse", (string)null);
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblRegistrationMembership", b =>
                {
                    b.Property<int>("MembershipId")
                        .HasColumnType("int")
                        .HasColumnName("membership_id");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("ExprirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expriration_date");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("registration_date");

                    b.Property<bool?>("RegistrationStatus")
                        .HasColumnType("bit")
                        .HasColumnName("registration_status");

                    b.HasKey("MembershipId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("tblRegistrationMembership", (string)null);
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.ToTable("tblRole", (string)null);
                });

            modelBuilder.Entity("TblCourseWishlist", b =>
                {
                    b.HasOne("WebAPI.Repository.Models.TblAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_tblCourseWishlist_tblAccount");

                    b.HasOne("WebAPI.Repository.Models.TblCourse", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_tblCourseWishlist_tblCourse");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblAccount", b =>
                {
                    b.HasOne("WebAPI.Repository.Models.TblRole", "Role")
                        .WithMany("TblAccounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblAccount_tblRole");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblBill", b =>
                {
                    b.HasOne("WebAPI.Repository.Models.TblAccount", "Account")
                        .WithMany("TblBills")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblBill_tblAccount");

                    b.HasOne("WebAPI.Repository.Models.TblCourse", "Course")
                        .WithMany("TblBills")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblBill_tblCourse");

                    b.Navigation("Account");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblBillMembership", b =>
                {
                    b.HasOne("WebAPI.Repository.Models.TblAccount", "Account")
                        .WithMany("TblBillMemberships")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblBillMembership_tblAccount");

                    b.HasOne("WebAPI.Repository.Models.TblMembership", "Membership")
                        .WithMany("TblBillMemberships")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblBillMembership_tblMembership");

                    b.Navigation("Account");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblBlog", b =>
                {
                    b.HasOne("WebAPI.Repository.Models.TblAccount", "Account")
                        .WithMany("TblBlogs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblBlog_tblAccount");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblClassSchedule", b =>
                {
                    b.HasOne("WebAPI.Repository.Models.TblRegistrationCourse", "Registration")
                        .WithMany("TblClassSchedules")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblClassSchedule_tblRegistrationCourse");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblComment", b =>
                {
                    b.HasOne("WebAPI.Repository.Models.TblAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblComment_tblAccount");

                    b.HasOne("WebAPI.Repository.Models.TblBlog", "Blog")
                        .WithMany()
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblComment_tblBlog");

                    b.Navigation("Account");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblCourse", b =>
                {
                    b.HasOne("WebAPI.Repository.Models.TblAccount", "Account")
                        .WithMany("TblCourses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblCourse_tblAccount");

                    b.HasOne("WebAPI.Repository.Models.TblCategory", "Category")
                        .WithMany("TblCourses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblCourse_tblCategory");

                    b.Navigation("Account");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblCourseSchedule", b =>
                {
                    b.HasOne("WebAPI.Repository.Models.TblCourse", "Course")
                        .WithMany("TblCourseSchedules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblCourseSchedule_tblCourse");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblRatingCourse", b =>
                {
                    b.HasOne("WebAPI.Repository.Models.TblCourse", "Course")
                        .WithMany("TblRatingCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblRatingCourse_tblCourse");

                    b.HasOne("WebAPI.Repository.Models.TblRegistrationCourse", "Registration")
                        .WithOne("TblRatingCourse")
                        .HasForeignKey("WebAPI.Repository.Models.TblRatingCourse", "RegistrationId")
                        .IsRequired()
                        .HasConstraintName("FK_tblRatingCourse_tblRegistrationCourse");

                    b.Navigation("Course");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblRegistrationCourse", b =>
                {
                    b.HasOne("WebAPI.Repository.Models.TblAccount", "Account")
                        .WithMany("TblRegistrationCourses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblRegistrationCourse_tblAccount");

                    b.HasOne("WebAPI.Repository.Models.TblCourse", "Course")
                        .WithMany("TblRegistrationCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblRegistrationCourse_tblCourse");

                    b.HasOne("WebAPI.Repository.Models.TblCourseSchedule", "CourseSchedule")
                        .WithMany("TblRegistrationCourses")
                        .HasForeignKey("CourseScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_tblRegistrationCourse_tblCourseSchedule");

                    b.Navigation("Account");

                    b.Navigation("Course");

                    b.Navigation("CourseSchedule");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblRegistrationMembership", b =>
                {
                    b.HasOne("WebAPI.Repository.Models.TblAccount", "Account")
                        .WithMany("TblRegistrationMemberships")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_tblRegistrationMembership_tblAccount");

                    b.HasOne("WebAPI.Repository.Models.TblMembership", "Membership")
                        .WithMany("TblRegistrationMemberships")
                        .HasForeignKey("MembershipId")
                        .IsRequired()
                        .HasConstraintName("FK_tblRegistrationMembership_tblMembership");

                    b.Navigation("Account");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblAccount", b =>
                {
                    b.Navigation("TblBillMemberships");

                    b.Navigation("TblBills");

                    b.Navigation("TblBlogs");

                    b.Navigation("TblCourses");

                    b.Navigation("TblRegistrationCourses");

                    b.Navigation("TblRegistrationMemberships");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblCategory", b =>
                {
                    b.Navigation("TblCourses");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblCourse", b =>
                {
                    b.Navigation("TblBills");

                    b.Navigation("TblCourseSchedules");

                    b.Navigation("TblRatingCourses");

                    b.Navigation("TblRegistrationCourses");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblCourseSchedule", b =>
                {
                    b.Navigation("TblRegistrationCourses");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblMembership", b =>
                {
                    b.Navigation("TblBillMemberships");

                    b.Navigation("TblRegistrationMemberships");
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblRegistrationCourse", b =>
                {
                    b.Navigation("TblClassSchedules");

                    b.Navigation("TblRatingCourse")
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPI.Repository.Models.TblRole", b =>
                {
                    b.Navigation("TblAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
